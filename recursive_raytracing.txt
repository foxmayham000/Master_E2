@name Recursive Raytracing
@inputs
@outputs [Count Holo]:number [Ar]:array [Initial]:vector [R Recurse Last_Initial]:ranger

if ( first() )
{
    function holocreate_line(I,P1:vector,P2:vector)
    {
        if( holoEntity(I):pos() == vec(0) )
        {
            holoCreate(I)
        }
        else
        {
            holoAlpha(I,255)
            
            holoColor(I,vec(0,255,255))
            holoScaleUnits(I,vec())
            holoDisableShading(I,1) 
            
            Dis = P1:distance(P2)
            holoPos(I , mix( P1 , P2 , 0.5) )
            holoAng(I , ( P1 - P2 ):toAngle()+ang(90,0,0) )
            holoScaleUnits( I , vec( 0.5 ,  0.5 , Dis ) )
            
            holoColor(I, mix( vec(255,0,0),vec(0,255,0) , 0.1*clamp(Count,1,10) ) )
        }
    }
    
    function holocreate_plane(I,P1:vector,Ranger:ranger)
    {
        if( holoEntity(I):pos() == vec(0) )
        {
            holoCreate(I)
        }
        else
        {
            holoAlpha(I,255)
            
            holoScaleUnits(I,vec(6,2,1))
            holoModel(I,"plane")
            holoDisableShading(I,1)
            
            HitNorm = Ranger:hitNormal()
            holoPos(I,P1+Ranger:hitNormal()/3)
            holoAng(I,HitNorm:toAngle()+ang(90,0,0))
        }
        
    }
    
}
interval(200)

for( I = 1 , Count*2 )
{
    holoAlpha(I,0)
}





Ar:clear()
R = rangerOffset( 1000 , entity():pos() , entity():up() )

Holo=0
Count = 1

Up = entity():up()
Initial = R:pos()

holocreate_plane(Holo,Initial,R) 
Holo+=1

holocreate_line(Holo, Initial , entity():pos() )
Holo+=1

Last_Initial = R

for ( I = 1 , 500 ) 
{
    rangerFilter(Ar)
    
    Recurse = rangerOffset( 10000 , Initial , Up )
    
    if( Recurse:hit() != 1 | Recurse:hitWorld() == 1 | perf(50) != 1 )
    {
        break
    }
    else
    {
        Ent = Recurse:entity()
        Initial = Recurse:pos()
        
        holocreate_line( Holo , Initial , Last_Initial:position() )
        Holo+=1
        
        holocreate_plane( Holo , Initial , Recurse ) 
        Holo+=1
        
        #RefractedDir = (REFRIncidantDir + REFRHitNormal * RefractIndex):normalized()
        
        if( Recurse:entity():getAlpha() < 150 )
        {
            Up = mix( Up , -( Last_Initial:hitNormal():toAngle()+ang(0,0,0) ):up()  , 0.8 )
            
            Ar:pushEntity(Ent)
        }
        else
        {
            Up = -Up:rotateAroundAxis( Recurse:hitNormal() , 180 )
            
            #Up = ( mix( HitNorm:toAngle()+ang(90,0,0) , Last_Initial:hitNormal():toAngle()+ang(90,0,0) , 0.9 )  ):up()
        }
        
        Count += 1
        Last_Initial = Recurse
    }
}
 
setName("Recursive Raytracing count["+Count+"]")






